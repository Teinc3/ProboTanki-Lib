name: Publish to PyPI

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Important for cibuildwheel to detect project history correctly

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11' # Use the same Python version you're targeting

    - name: Build wheels
      uses: pypa/cibuildwheel@v2.17.0
      env:
        # Pass TWINE_USERNAME/PASSWORD here if you want cibuildwheel to upload,
        # but it's generally better to let twine handle it in a separate step after all wheels are built.
        # This example builds the wheels and stores them as artifacts.
        CIBW_BUILD_VERBOSITY: 1 # Optional: for more verbose output during build

  upload_all_wheels:
    name: Upload all wheels to PyPI
    needs: build_wheels # This job runs only after all wheels are built successfully
    runs-on: ubuntu-latest
    environment: pypi # Using GitHub environments for secrets
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Download all wheels
      uses: actions/download-artifact@v4
      with:
        name: cibuildwheel # This is the default artifact name for cibuildwheel
        path: dist

    - name: Install Twine
      run: python -m pip install twine

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_KEY }}
      run: |
        # Check if dist/ directory exists and has files
        ls -la dist/
        # Use --non-interactive to prevent twine from asking questions if any dists are already on PyPI
        python -m twine upload --non-interactive dist/*