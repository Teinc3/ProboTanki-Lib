name: Publish to PyPI

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # It's good you included more OS options from the cibuildwheel example!
        # Note: ubuntu-24.04-arm and windows-11-arm might require specific runner configurations
        # or may not be directly available as GitHub-hosted runners by default for all users.
        # Stick to ubuntu-latest, macos-latest, windows-latest for broader compatibility if unsure.
        os: [ubuntu-latest, macos-latest, windows-latest] # Simplified for common GitHub runners
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Important for cibuildwheel to detect project history correctly

    - name: Set up Python
      uses: actions/setup-python@v5 # Using v5 as per your example
      with:
        python-version: '3.11' # Use the same Python version you're targeting

    - name: Install cibuildwheel
      run: python -m pip install cibuildwheel==3.0.0 # Manual install as per your example

    - name: Build wheels
      run: python -m cibuildwheel --output-dir wheelhouse
      env:
        CIBW_BUILD_VERBOSITY: 1 # Optional: for more verbose output during build

    # This uploads one artifact per OS/job matrix.
    # The name is dynamic, which we'll handle in the download step.
    - uses: actions/upload-artifact@v4
      with:
        name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
        path: ./wheelhouse/*.whl # Path to the generated wheels

  upload_all_wheels:
    name: Upload all wheels to PyPI
    needs: build_wheels # This job runs only after all wheels are built successfully
    runs-on: ubuntu-latest
    environment: pypi # Using GitHub environments for secrets
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Download all wheels artifacts
      uses: actions/download-artifact@v4
      with:
        # By omitting 'name', this downloads ALL artifacts from the 'build_wheels' job
        # Each artifact will be placed in a subdirectory under 'downloaded-wheels/'
        path: downloaded-wheels/

    - name: Flatten wheel directories
      run: |
        # Create a single 'dist' directory for all wheels
        mkdir dist
        # Find all .whl files (wheels) and move them to 'dist/'
        find downloaded-wheels/ -name "*.whl" -exec mv {} dist/ \;
        # Also move source distributions (.tar.gz) if they are present from the build step
        find downloaded-wheels/ -name "*.gz" -exec mv {} dist/ \;
        find downloaded-wheels/ -name "*.zip" -exec mv {} dist/ \; # For Windows sdist/wheels if applicable

    - name: Install Twine
      run: python -m pip install twine

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_KEY }} # Recommended to keep consistent naming: PYPI_API_TOKEN
      run: |
        echo "Contents of dist/ before upload:"
        ls -la dist/ # Check what's in dist/
        python -m twine upload --non-interactive dist/*